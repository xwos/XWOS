--[[--------
XWLUA模块：自旋锁


自旋锁是多核系统中为防止多个处理器同时访问临界区而引入的一种锁。
当一个CPU获得自旋锁并访问临界区时，其他CPU只能“**自旋**”等待锁。
所谓“**自旋**”，是指不断循环测试锁的是否可用。

自旋锁内的操作可以认为是原子的，不可打断的。因此，自旋锁还伴随其他操作，
例如关闭调度器的抢占，关闭中断底半部，关闭中断等。
在单核(UP)系统中，只有一个CPU，不需要自旋过程，单核系统为了软件接口与多核系统兼容，
也会实现自旋锁，这种自旋锁只需关闭抢占、中断底半部或中断。


## **to-be-closed**特性

**to-be-closed**特性是Lua-5.4新引入的。拥有**to-be-closed**特性的变量，在离开其作用域时，会自动被**关闭**。
**关闭**行为由元方法**__close()**来定义。

XWLUA的自旋锁对象强指针，通过**to-be-closed**特性，提供了**scope lock模式**，当自旋锁对象强指针离开作用域时，会自动解锁关联的自旋锁。


## 不可重入锁

XWLUA的自旋锁是不可重入锁，不可重复上锁。

@module xwos.lock.splk
]]

--[[--------
新建一个自旋锁<br>
<br>

@treturn userdata 新的自旋锁对象的强指针 `splksp`

@usage
mysplk = xwos.splk.new()
]]
function new()
end
